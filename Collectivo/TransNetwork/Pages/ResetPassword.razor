@layout LoginLayout
@*@page "/resetPassword"*@
@page "/resetPassword/{email}"

@using System;
@using System.Text.RegularExpressions;

<style>
    body {
        background: url("https://wallpaperaccess.com/full/1567736.png") no-repeat center center fixed ;
/*        background: linear-gradient(217deg, rgba(218,221,226,.8), rgba(218,221,226,0) 70.71%), linear-gradient(127deg, rgba(202,210,85,.8), rgba(202,210,85,0) 70.71%), linear-gradient(216deg, rgba(95,107,119,.8), rgba(95,107,119,0) 70.71%), linear-gradient(336deg, rgba(209,100,5,.8), rgba(209,100,5,0) 70.71%);
       background: linear-gradient(217deg, rgba(199,217,133,.8), rgba(199,217,133,0) 70.71%), linear-gradient(127deg, rgba(180,180,180,.8), rgba(180,180,180,0) 70.71%), linear-gradient(336deg, rgba(232,244,181,.8), rgba(232,244,181,0) 70.71%);
       */  height: auto;
        margin: 0;
        background-repeat: no-repeat;
        background-attachment:fixed;
        animation: gradient 15s ease infinite;
    }

    .hover-underline-animation {
  display: inline-block;
  position: relative;
  color: #0087ca;
  cursor:pointer;
}

.hover-underline-animation:after {
  content: '';
  position: absolute;
  width: 100%;
  transform: scaleX(0);
  height: 2px;
  bottom: 0;
  left: 0;
  background-color: #0087ca;
  transform-origin: bottom right;
  transition: transform 0.25s ease-out;
}
.hover-underline-animation:hover:after {
  transform: scaleX(1);
  transform-origin: bottom left;
}
</style>



<div class="row" style="margin-top:30%">
    <div class="col-md-12 d-flex justify-content-center align-items-center">
        <RadzenLabel Text="Reset password" Style="font-weight:800; font-size: 32px; color: mintcream;"> </RadzenLabel>
    </div>

</div>

<div class="row" >
    <div class="col-md-12 d-flex justify-content-center">

        <RadzenCard Style="background: rgba(255,255,255,0.5);backdrop-filter:blur(15px)">
                
                <div class="row" style="margin-top:5%">

                    <div class="col-md-12">
                        <RadzenIcon Icon="lock" style="position:absolute;top:8px; left: 25px; pointer-events: none;color:grey;" />
                        <RadzenPassword @bind-Value="UserList.MotDePasse" Placeholder="New password" style="width: 100%;padding-left:40px; border-radius:10px;height:40px"  Visible="true" Name="MotDePasse">
                        </RadzenPassword>
                    </div>
                </div>


                <div class="row" style="margin-top:10px">

                    <div class="col-md-12">
                        <RadzenIcon Icon="lock" style="position: absolute; top: 8px; left: 25px; pointer-events: none; color: grey" />
                        <RadzenPassword  @bind-Value="@repeatPass" Placeholder="Confirm password" style="width: 100%; padding-left: 40px; border-radius: 10px; height: 40px " Visible="true" Name="MotDePasse">
                        </RadzenPassword>
                    </div>
                </div>


                 <div class="row" style="margin-top:10px">
                    <div class="col-md-12 d-flex align-items-center justify-content-center">
                        <RadzenButton  Click=@(args =>OnLogin(UserList)) Style="width:100%;color:dimgray;background-color: khaki; border-radius: 10px; font-weight: bolder;" Text="Submit"></RadzenButton>
                    </div>
                </div>

              @*  <div class="row" >
                    <div class="col-md-12 d-flex justify-content-center align-items-center">
                        <label>
                            <RadzenLabel Text="Don't have an account yet?" Style="font-weight:200; font-size: 11px; color: #0f0f0f;"> </RadzenLabel>
                            <label onclick="OnRegister()" class="hover-underline-animation"  Style="font-weight:400; font-size: 12px;"> Sign up</label>
                        </label>
                    </div>
                </div>*@

        </RadzenCard>

       
    </div>

</div>




@code {

    [Parameter]
    public string email { get; set; }

    public UtilisateurModel UserList { get; set; } = new UtilisateurModel();
    IList<UtilisateurModel> Utilisateurs;
    string repeatPass;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        Utilisateurs = await UtilisateurService.ListAll("", "NomUtilisateur", "");
        // string decryptedEmail = Encrypt_Decrypt_Data.Decrypt(email);

    }


    public async void OnLogin(UtilisateurModel user)
    {
        if (user.MotDePasse == null)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Please enter a password", Duration = 4000 });
            return;
        }
        else
        {
            if(!IsValidPassword(user.MotDePasse))
            {
                return;
            }

            if(user.MotDePasse != repeatPass)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Passwords should be the same", Duration = 4000 });
                return;
            }

            UserList.IdUtilisateur = UtilisateurService.GetByEmail(Encrypt_Decrypt_Data.Decrypt(email)).Result.IdUtilisateur;
            UserList = Utilisateurs.Where(u => u.IdUtilisateur == UserList.IdUtilisateur).ToList()[0];
            UserList.MotDePasse = repeatPass;
            UtilisateurService.Update(UserList);

            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Password has been updated successfully", Duration = 4000 });

            NavigationManager.NavigateTo("login");
        }
    }


     bool IsValidPassword(string pass)
    {
        var hasNumber = new Regex(@"[0-9]+");
        var hasUpperChar = new Regex(@"[A-Z]+");
        var hasMinimum8Chars = new Regex(@".{8,}");

        if (!hasNumber.IsMatch(pass))
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Password must contain at least one number", Duration = 4000 });
            return false;
        }

         if (!hasUpperChar.IsMatch(pass))
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Password must contain at least one upper case letter", Duration = 4000 });
            return false;
        }

         if (!hasMinimum8Chars.IsMatch(pass))
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Password must contain at least 8 characters length", Duration = 4000 });
            return false;
        }

        return hasNumber.IsMatch(pass) && hasUpperChar.IsMatch(pass) && hasMinimum8Chars.IsMatch(pass);
        
    }

   

}